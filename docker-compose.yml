version: '3.8'
services:
  db:
    image: postgres:latest
    restart: always
    container_name: postgres
    ports:
      - '5433:5432'
    build:
      dockerfile: ./db/Dockerfile
    volumes: 
      - postgres_data:/var/lib/postgresql/data
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.2
    container_name: kafka
    ports:
      - "9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_started

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      kafka:
        condition: service_started
  ms-order:
    build:
      dockerfile: ./ms-order/Dockerfile
    image: ms-order:latest
    container_name: ms-order
    ports:
      - '8080'
    depends_on:
      kafka:
        condition: service_started
      db:
        condition: service_started
      
  ms-auth-user:
    build:
      dockerfile: ./ms-auth-user/Dockerfile
    image: ms-auth-user:latest
    container_name: ms-auth-user
    ports:
      - '8080'
    depends_on:
      db:
        condition: service_started

  ms-auth-admin:
    build:
      dockerfile: ./ms-auth-admin/Dockerfile
    image: ms-auth-admin:latest
    container_name: ms-auth-admin
    ports:
      - '8080'
    depends_on:
      db:
        condition: service_started

  ms-delivery:
    build:
      dockerfile: ./ms-delivery/Dockerfile
    image: ms-delivery:latest
    container_name: ms-delivery
    ports:
      - '8080'
    depends_on:
      kafka:
        condition: service_started
      db:
        condition: service_started

  ms-courier:
    build:
      dockerfile: ./ms-courier/Dockerfile
    image: ms-courier:latest
    container_name: ms-courier
    ports:
      - '8080'
    depends_on:
      db:
        condition: service_started

  gateway:
    build:
      dockerfile: ./gateway/Dockerfile
    image: gateway:latest
    container_name: gateway
    ports:
      - '8080:8080'

volumes:
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
